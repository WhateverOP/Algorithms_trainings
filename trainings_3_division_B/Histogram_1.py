'''
Вовочка ломает систему безопасности Пентагона.
Для этого ему понадобилось узнать, какие символы в секретных зашифрованных посланиях употребляются чаще других.
Для удобства изучения Вовочка хочет получить графическое представление встречаемости символов.
Поэтому он хочет построить гистограмму количества символов в сообщении.
Гистограмма — это график, в котором каждому символу, встречающемуся в сообщении хотя бы один раз, соответствует столбик,
высота которого пропорциональна количеству этих символов в сообщении.

Формат ввода

Входной файл содержит зашифрованный текст сообщения.
Он содержит строчные и прописные латинские буквы, цифры, знаки препинания («.», «!», «?», «:», «-», «,», «;», «(», «)»), пробелы и переводы строк.
Размер входного файла не превышает 10000 байт. Текст содержит хотя бы один непробельный символ.
Все строки входного файла не длиннее 200 символов.Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#»,
количество которых должно быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ, соответствующий ему.
Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец были непустыми. Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов.

Формат вывода

Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#»,
количество которых должно быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ, соответствующий ему.
Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец были непустыми.
Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов. 
'''

def get_hist(s):
    symbol_dict = {}
    for symbol in s:
        if symbol not in symbol_dict:
            symbol_dict[symbol] = 0
        symbol_dict[symbol] += 1
    max_height = max(symbol_dict.values())
    sorted_keys = sorted(symbol_dict.keys())
    height = max_height
    while height > 0:
        tmp_list = [' ']*len(sorted_keys)
        for i in range(0, len(sorted_keys)):
            if symbol_dict[sorted_keys[i]] >= height:
                tmp_list[i] = '#'
        print(''.join(tmp_list))
        height -= 1
    print(''.join(sorted_keys))

# path_to_text = "/home/opv002/py_notes/git_repos/Algorithms_trainings/trainings_3_division_B/data/Histogram_1_text_1.txt"
path_to_text = "/home/opv002/py_notes/git_repos/Algorithms_trainings/trainings_3_division_B/data/Histogram_1_text_2.txt"
text = open(path_to_text)

s_input = ''
for string in text:
    if string == '\n':
        continue
    string = string.replace('\n','')
    string = string.replace(' ','')
    s_input += string

get_hist(s_input)