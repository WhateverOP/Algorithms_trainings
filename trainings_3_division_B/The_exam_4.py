'''


Петя и Вася — одноклассники и лучшие друзья, поэтому они во всём помогают друг другу. Завтра у них контрольная по математике, и учитель подготовил целых K вариантов заданий.

В классе стоит один ряд парт, за каждой из них (кроме, возможно, последней) на контрольной будут сидеть ровно два ученика.
Ученики знают, что варианты будут раздаваться строго по порядку:
правый относительно учителя ученик первой парты получит вариант 1, левый — вариант 2, правый ученик второй парты получит вариант 3 (если число вариантов больше двух) и т.д.
Так как K может быть меньше чем число учеников N, то после варианта K снова выдаётся вариант 1. На последней парте в случае нечётного числа учеников используется только место 1.

Петя самым первым вошёл в класс и сел на своё любимое место.
Вася вошёл следом и хочет получить такой же вариант, что и Петя, при этом сидя к нему как можно ближе.
То есть между ними должно оказаться как можно меньше парт, а при наличии двух таких мест с равным расстоянием от Пети Вася сядет позади Пети, а не перед ним.
Напишите программу, которая подскажет Васе, какой ряд и какое место (справа или слева от учителя) ему следует выбрать.
Если же один и тот же вариант Вася с Петей писать не смогут, то выдайте одно число  - 1.

Формат ввода

В первой строке входных данных находится количество учеников в классе 2 ≤ N ≤ 109.
Во второй строке — количество подготовленных для контрольной вариантов заданий 2 ≤ K ≤ N.
В третьей строке — номер ряда, на который уже сел Петя, в четвёртой — цифра 1, если он сел на правое место, и 2, если на левое.

Формат вывода

Если Вася никак не сможет писать тот же вариант, что и Петя, то выведите  - 1.
Если решение существует, то выведите два числа — номер ряда, на который следует сесть Васе, и 1, если ему надо сесть на правое место, или 2, если на левое.
Разрешается использовать только первые N мест в порядке раздачи вариантов. 

'''

# path_to_text = "/home/opv002/py_notes/git_repos/Algorithms_trainings/trainings_3_division_B/data/The_exam_4_text_1.txt"
path_to_text = "/home/opv002/py_notes/git_repos/Algorithms_trainings/trainings_3_division_B/data/The_exam_4_text_2.txt"
text = open(path_to_text)

lines = []
for line in text.readlines():
    if line == '\n':
        continue
    line = line.replace('\n', '')
    lines.append(int(line))

N = lines[0]
K = lines[1]
row = lines[2]
place = lines[3] # 1 - right,  2 - left

def get_the_best_place(N, K, row, place):
    P_place = (row - 1) * 2 + place
    P_var = P_place % K
    V_places_tmp = [P_place - K, P_place + K]
    V_places = []
    for i in range(0, len(V_places_tmp)):
        if V_places_tmp[i] > 0 and V_places_tmp[i] <= N:
            V_places.append(V_places_tmp[i])

    V_rows = [(V_places[i] + 1) // 2 for i in range(0, len(V_places))]
    V_LRs = [(V_places[i] + 1) % 2 + 1 for i in range(0, len(V_places))]
    if len(V_places) == 0:
        return [-1]
    elif len(V_places) == 1:
        return [V_rows[0], V_LRs[0]]
    
    if abs(V_rows[0] - row) == abs(V_rows[1] - row):
        if V_rows[0] > V_rows[1]:
            return [V_rows[0], V_LRs[0]]
        else:
            return [V_rows[1], V_LRs[1]]
    else:
        if abs(V_rows[0] - row) < abs(V_rows[1] - row):
            return [V_rows[0], V_LRs[0]]
        else:
            return [V_rows[1], V_LRs[1]]

    
# N = 23
# K = 12
# row = 6
# place = 1 # 1 - right,  2 - left

N = 20
K = 3
row = 6
place = 1 # 1 - right,  2 - left

ans = get_the_best_place(N, K, row, place)
print(' '.join([str(i) for i in ans]))